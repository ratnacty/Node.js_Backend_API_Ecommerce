// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String
  password   String
  is_blocked Boolean  @default(false)
  role_id    Int
  created_at DateTime @default(now())

  tokens Token[]
  role   Role    @relation(fields: [role_id], references: [id])
  carts   cart[]
  orders  Orders[]
  product  product[]

  @@map("users")
}

model Token {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("tokens")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())

  users       User[]
  permissions PermissionRole[]

  @@map("roles")
}

model Permission {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())

  roles PermissionRole[]

  @@map("permissions")
}

model PermissionRole {
  permission_id Int
  role_id       Int

  permission Permission @relation(fields: [permission_id], references: [id])
  role       Role       @relation(fields: [role_id], references: [id])

  @@id([permission_id, role_id])
  @@map("permission_role")
}


// PRODUCT 

model product {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  category    String?  @db.VarChar(255)
  price       Float?   @db.Float
  in_stock    Boolean?
  description String?  @db.Text
  user_id     Int
  created_at DateTime @default(now())

  user      User   @relation(fields: [user_id], references: [id])

  @@map("products")
}

model cart {
  id        Int    @id @default(autoincrement())
  quantity  Int?
  productID Int?
  total     Float? @db.Float
  userID    Int
  created_at DateTime @default(now())

  
  user     User  @relation(fields: [userID], references: [id])
  @@index([productID], map: "productID")
}

model Orders {
  id         Int      @id @default(autoincrement())
  userID     Int
  nomorOrder String
  total      Float
  status     String    @default("Pending")
  created_at DateTime? @default(now())
  items      OrderItems[]


  user User  @relation(fields: [userID], references: [id])
}

model OrderItems {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  total      Float
  created_at DateTime @default(now())

  order      Orders   @relation(fields: [order_id], references: [id])
  
}
